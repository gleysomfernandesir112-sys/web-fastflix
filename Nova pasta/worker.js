self.onmessage = function(e) {    try {        var content = e.data;        var lines = content.split('\n');        var allChannels = { filmes: {}, series: {}, tv: {} };        var currentChannel = null;        function normalizeTitle(title) {            return title ? title.trim().replace(/\b\w/g, function(c) { return c.toUpperCase(); }) : "Sem Título";        }        function parseGroup(group) {            var clean = group.replace(/[◆]/g, "").trim();            var parts = clean.split("|").map(function(part) { return part.trim(); });            var main = parts[0].toLowerCase();            var sub = parts.length > 1 ? parts[1] : "Outros";            return { main: main, sub: sub };        }        function categorizeChannel(channel) {            try {                var title = channel.title.toLowerCase();                var groupInfo = parseGroup(channel.group);                var main = groupInfo.main;                var sub = groupInfo.sub;                var hasSeriesPattern = /(s\d{1,2}e\d{1,2})|(temporada\s*\d+)|(episodio\s*\d+)|(ep\s*\d+)|(capitulo\s*\d+)|(season\s*\d+)|(episode\s*\d+)/i.test(title);                var looksLikeLinearChannel = /(24h|canal|mix|ao vivo|live|4k|fhd|hd|sd|channel|tv|plus|stream|broadcast)/i.test(title);                if (main.includes("canais") || main.includes("canal") || looksLikeLinearChannel) {                    if (!allChannels.tv[sub]) allChannels.tv[sub] = [];                    allChannels.tv[sub].push({                         title: normalizeTitle(channel.title),                         url: channel.url,                         logo: channel.logo,                        isLive: true                    });                    return;                }                if (main.includes("series") || main.includes("série") || hasSeriesPattern && !looksLikeLinearChannel) {                    var seriesName, season, episodeTitle;                    var match = title.match(/^(.*?)\s*(?:[Ss](\d{1,2})\s*[Ee](\d{1,2})|(temporada|season)\s*(\d+)|(episodio|ep|episode|capitulo)\s*(\d+))/i);                    if (match) {                        seriesName = normalizeTitle(match[1] || title.replace(/(temporada|episodio|season|episode|capitulo).*/i, "").trim());                        season = match[2] || match[5] || match[7] || "1";                        episodeTitle = match[3] ? "Episódio " + match[3] : (match[7] ? "Episódio " + match[7] : normalizeTitle(title));                    } else {                        seriesName = normalizeTitle(title.replace(/(temporada|episodio|season|episode|capitulo).*/i, "").trim());                        season = "1";                        episodeTitle = normalizeTitle(title);                    }                    var seriesKey = seriesName.toLowerCase();                    if (!allChannels.series[sub]) allChannels.series[sub] = {};                    var seriesSub = allChannels.series[sub];                    if (!seriesSub[seriesKey]) {                        seriesSub[seriesKey] = { displayName: seriesName, seasons: {}, logo: channel.logo };                    }                    if (!seriesSub[seriesKey].seasons[season]) {                        seriesSub[seriesKey].seasons[season] = [];                    }                    seriesSub[seriesKey].seasons[season].push({ title: episodeTitle, url: channel.url, logo: channel.logo });                    seriesSub[seriesKey].seasons[season].sort((a, b) => {                        var epA = parseInt(a.title.match(/\d+/)?.[0] || 0);                        var epB = parseInt(b.title.match(/\d+/)?.[0] || 0);                        return epA - epB;                    });                    return;                }                if (main.includes("filmes") || main.includes("filme") && !looksLikeLinearChannel && title.length > 5) {                    if (!allChannels.filmes[sub]) allChannels.filmes[sub] = [];                    allChannels.filmes[sub].push({                         title: normalizeTitle(channel.title),                         url: channel.url,                         logo: channel.logo                     });                    return;                }                if (!allChannels.tv["Outros"]) allChannels.tv["Outros"] = [];                allChannels.tv["Outros"].push({                     title: normalizeTitle(channel.title),                     url: channel.url,                     logo: channel.logo,                    isLive: looksLikeLinearChannel                });            } catch (error) {                console.error("Erro ao categorizar canal:", channel.title, error);                if (!allChannels.tv["Outros"]) allChannels.tv["Outros"] = [];                allChannels.tv["Outros"].push({                     title: normalizeTitle(channel.title),                     url: channel.url,                     logo: channel.logo,                    isLive: false                });            }        }        for (var i = 0; i < lines.length; i++) {            var line = lines[i].trim();            try {                if (line.startsWith("#EXTINF:")) {                    var titleMatch = line.match(/,(.+)/) || line.match(/tvg-name="([^"]+)"/i);                    var groupMatch = line.match(/group-title="([^"]+)"/i);                    var logoMatch = line.match(/tvg-logo="([^"]+)"/i);                    var title = titleMatch ? titleMatch[1].trim() : "Canal Desconhecido";                    currentChannel = {                        title: title,                        url: "",                        group: groupMatch ? groupMatch[1] : "",                        logo: logoMatch ? logoMatch[1] : ""                    };                } else if (line && !line.startsWith("#") && currentChannel) {                    currentChannel.url = line;                    categorizeChannel(currentChannel);                    currentChannel = null;                }            } catch (error) {                console.error("Erro ao processar linha", i, ":", line, error);                currentChannel = null;            }        }        self.postMessage(allChannels);    } catch (error) {        self.postMessage({ error: "Erro geral no parsing: " + error.message });    }};